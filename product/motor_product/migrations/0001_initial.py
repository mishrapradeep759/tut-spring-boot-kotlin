# Generated by Django 3.0.5 on 2020-04-30 18:19

import core.fields
import core.models
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('URBAN', 'Urban'), ('RURAL', 'Rural')], max_length=10)),
                ('line_1', models.CharField(max_length=100, verbose_name='Street')),
                ('line_2', models.CharField(blank=True, max_length=100, verbose_name='Street')),
                ('landmark', models.TextField(blank=True, verbose_name='Landmark')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('district', models.CharField(default='', max_length=100, verbose_name='District')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('pincode', models.CharField(max_length=10, verbose_name='Pincode')),
                ('raw', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, verbose_name='raw')),
            ],
            options={
                'abstract': False,
            },
            bases=(core.models.AbstractBaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='Insurer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('slug', models.SlugField(max_length=70, unique=True, verbose_name='slug')),
                ('body', models.TextField(blank=True, verbose_name='body')),
            ],
        ),
        migrations.CreateModel(
            name='Make',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='name')),
                ('is_active_for_twowheeler', models.BooleanField(default=True)),
                ('is_active_for_fourwheeler', models.BooleanField(default=True)),
                ('is_popular_for_fourwheeler', models.NullBooleanField()),
                ('is_popular_for_twowheeler', models.NullBooleanField()),
                ('is_popular', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(core.models.AbstractBaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('make', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='motor_product.Make')),
            ],
            options={
                'ordering': ('name',),
                'unique_together': {('make', 'name')},
            },
            bases=(core.models.AbstractBaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_code', models.CharField(blank=True, max_length=250)),
                ('name', models.CharField(blank=True, max_length=250)),
                ('make', models.CharField(blank=True, max_length=250)),
                ('make_code', models.CharField(blank=True, max_length=50)),
                ('model', models.CharField(blank=True, max_length=250)),
                ('model_code', models.CharField(blank=True, max_length=50)),
                ('variant', models.CharField(blank=True, max_length=250)),
                ('variant_code', models.CharField(blank=True, max_length=50)),
                ('cc', models.IntegerField(blank=True, null=True)),
                ('seating_capacity', models.IntegerField(blank=True, null=True)),
                ('fuel_type', models.CharField(blank=True, max_length=50)),
                ('vehicle_segment', models.CharField(blank=True, max_length=250)),
                ('number_of_wheels', models.IntegerField(blank=True, null=True)),
                ('ex_showroom_price', models.CharField(blank=True, max_length=20)),
                ('base_rate_discount', models.FloatField(blank=True, null=True)),
                ('risk_based_discount', models.FloatField(blank=True, null=True)),
                ('raw_data', models.TextField(blank=True, null=True)),
                ('processing_level', models.CharField(default='unprocessed', max_length=20)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('vehicle_type', core.fields.VehicleTypeCharField(choices=[('fourwheeler', 'Private Car'), ('twowheeler', 'Two Wheeler'), ('gcv', 'Goods Carrier Vehicle'), ('pcv', 'Passenger Carrying Vehicle'), ('auto', 'Auto')], default='fourwheeler', max_length=25)),
                ('gross_vehicle_weight', models.FloatField(blank=True, null=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='vehicle_data')),
                ('vehicle_category', models.CharField(choices=[('Private', 'Private'), ('Commercial', 'Commercial')], default='Private', max_length=25)),
                ('is_declined', models.NullBooleanField(default=False)),
                ('insurer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='motor_product.Insurer')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insurer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='motor_product.Insurer')),
                ('mapped_vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='motor_product.Vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant', models.CharField(db_index=True, max_length=250)),
                ('cc', models.IntegerField()),
                ('seating_capacity', models.IntegerField()),
                ('ex_showroom_price', models.FloatField(blank=True, null=True)),
                ('fuel_type', models.CharField(choices=[('PETROL', 'Petrol'), ('DIESEL', 'Diesel'), ('ELECTRICITY', 'Electricity'), ('INTERNAL_LPG_CNG', 'Internal LPG / CNG')], max_length=50)),
                ('vehicle_segment', models.CharField(blank=True, choices=[('COMPACT_CARS', 'Compact Cars'), ('HIGH_END_CARS', 'High End Cars'), ('MIDSIZE_CARS', 'Midsize Cars'), ('MULTIUTILITY_VEHICLES', 'Multi-utility Vehicles'), ('SMALL_SIZE_VEHICLES', 'Small Sized Vehicles'), ('SPORTS_UTILITY_VEHICLES', 'Sports and Utility Vehicles')], max_length=250)),
                ('vehicle_type', core.fields.VehicleTypeCharField(choices=[('fourwheeler', 'Private Car'), ('twowheeler', 'Two Wheeler'), ('gcv', 'Goods Carrier Vehicle'), ('pcv', 'Passenger Carrying Vehicle'), ('auto', 'Auto')], default='fourwheeler', max_length=25)),
                ('vehicle_category', models.CharField(choices=[('Private', 'Private'), ('Commercial', 'Commercial')], default='Private', max_length=25)),
                ('gross_vehicle_weight', models.FloatField(blank=True, null=True)),
                ('number_of_wheels', models.IntegerField(blank=True, null=True)),
                ('make', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='motor_product.Make')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='motor_product.Model')),
                ('sales_channels', models.ManyToManyField(to='core.SalesChannel')),
                ('sub_vehicles', models.ManyToManyField(through='motor_product.VehicleMapping', to='motor_product.Vehicle')),
            ],
        ),
        migrations.AddField(
            model_name='vehiclemapping',
            name='master_vehicle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='motor_product.VehicleMaster'),
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quote_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('is_new', models.BooleanField(default=True)),
                ('date_of_manufacture', models.DateField(blank=True, null=True)),
                ('raw_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, verbose_name='request_data')),
                ('is_processed', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('category', models.CharField(choices=[('Private', 'Private'), ('Commercial', 'Commercial')], default='Private', max_length=25, null=True)),
                ('type', models.CharField(choices=[('offline', 'Offline'), ('online', 'Online')], default='online', max_length=20, verbose_name='quote type')),
                ('policy_type', models.CharField(choices=[('new', 'New'), ('renew', 'Renew'), ('expired', 'Expired'), ('used', 'Used')], max_length=20, null=True)),
                ('registration_number', models.CharField(blank=True, db_index=True, max_length=32, null=True, verbose_name='Registration Number')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_motor_quotes', to='core.User')),
                ('original_quote_created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.User')),
                ('parent_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_quotes', to='motor_product.Quote')),
                ('previous_policy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='motor_product_quotes', to='core.Policy')),
                ('sales_channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.SalesChannel')),
                ('tracker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='motor_quotes', to='core.Tracker')),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='motor_product.VehicleMaster')),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('address_type', models.CharField(choices=[('COMMUNICATION_ADDRESS', 'Communication Address'), ('PERMANENT_ADDRESS', 'Permanent Address'), ('BILLING_ADDRESS', 'Billing address'), ('RISK_ADDRESS', 'Risk address'), ('REGISTRATION_OFFICE', 'Registered office'), ('NEW_ADDRESS', 'New address'), ('OTHER_OFFICES', 'Other offices')], max_length=30)),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('mobile', models.CharField(db_index=True, max_length=11, verbose_name='Mobile')),
                ('landline', models.CharField(max_length=12, verbose_name='Landline')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('title', models.CharField(blank=True, choices=[('MR.', 'Mr.'), ('MRS.', 'Mrs.'), ('MISS', 'Miss'), ('DR', 'Dr'), ('CAPTAIN', 'Captain'), ('LT', 'Lt'), ('MAJOR', 'Major'), ('GENERAL', 'General'), ('COLONEL', 'Colonel'), ('BRIGADIER', 'Brigadier'), ('JUDGE', 'Judge'), ('PROF', 'Prof'), ('SIR', 'Sir'), ('FATHER', 'Father'), ('MASTER', 'Master'), ('MADAM', 'Madam')], max_length=10, null=True)),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='First name')),
                ('middle_name', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Last name')),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=20, null=True, verbose_name='Gender')),
                ('father_first_name', models.CharField(max_length=255, verbose_name="Father's first name")),
                ('father_last_name', models.CharField(blank=True, max_length=255, verbose_name="Father's last name")),
                ('send_email', models.BooleanField(default=False)),
                ('send_sms', models.BooleanField(default=False)),
                ('phone_call', models.BooleanField(default=False)),
                ('nationality', models.CharField(max_length=50)),
                ('is_corporate_customer', models.BooleanField(default=False)),
                ('company_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Company name')),
                ('raw', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, verbose_name='raw')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='motor_product.Address')),
            ],
            options={
                'abstract': False,
            },
            bases=(core.models.AbstractBaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='BikeQuote',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('motor_product.quote',),
        ),
        migrations.CreateModel(
            name='CarQuote',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('motor_product.quote',),
        ),
        migrations.CreateModel(
            name='CommercialCarQuote',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('motor_product.quote',),
        ),
        migrations.CreateModel(
            name='GCVQuote',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('motor_product.quote',),
        ),
        migrations.CreateModel(
            name='PCVQuote',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('motor_product.quote',),
        ),
        migrations.AlterUniqueTogether(
            name='vehiclemapping',
            unique_together={('master_vehicle', 'insurer')},
        ),
    ]
